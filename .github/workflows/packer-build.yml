name: Packer AMI Build

on:
  push:
    branches:
      - main

jobs:
  build-custom-image:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Debug - List All Files and Directories
        run: |
          echo "Listing all files and directories recursively..."
          ls -la

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install Dependencies
        run: npm ci

      - name: Setup Build Environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip

      - name: Run Integration Tests
        env:
          DB_NAME: ${{ secrets.MYSQL_DATABASE }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          PORT: ${{ secrets.PORT }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
        run: npm test

      - name: Build Application Artifact
        env:
          PORT: ${{ secrets.PORT }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          DB_HOST: 127.0.0.1
          ENV_FILE_CONTENT: ${{ secrets.ENV_FILE_CONTENT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
        run: ./scripts/build.sh

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
           unzip -o awscliv2.zip
           sudo ./aws/install --update

      - name: Install GCP CLI SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: "latest"
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: "Debug: List Files"
        run: ls -R

      - name: Configure GCP Credentials
        run: |
          cat << 'EOF' > /tmp/gcloud.json
          ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          EOF
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcloud.json" >> $GITHUB_ENV

      - name: Show First Few Lines of JSON
        run: head -n 5 /tmp/gcloud.json

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.0"

      - name: Print Working Directory and List Files
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing files:"
          ls -la

      - name: Initialize Packer Template
        env:
          PACKER_GITHUB_API_TOKEN: ${{ secrets.GCP_API_TOKEN }}
        run: packer init ./packer/custom-image.pkr.hcl

      - name: Validate Packer Template
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DEFAULT_SUBNET_ID: ${{ secrets.AWS_DEFAULT_SUBNET_ID }}
          GCP_ZONE: ${{ secrets.GCP_ZONE }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          DB_USER: ${{ secrets.DB_USER }}
        run: |
          packer validate \
            -var "aws_region=${AWS_REGION}" \
            -var "aws_default_subnet_id=${AWS_DEFAULT_SUBNET_ID}" \
            -var "gcp_zone=${GCP_ZONE}" \
            -var "gcp_project_id=${GCP_PROJECT_ID}" \
            -var "AWS_DEMO_ACCOUNT_ID=${AWS_DEMO_ACCOUNT_ID}" \
            -var "MYSQL_DATABASE=${MYSQL_DATABASE}" \
            -var "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" \
            -var "DB_USER=${DB_USER}" \
            ./packer/custom-image.pkr.hcl

      - name: Run Packer Build
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          DB_USER: ${{ secrets.DB_USER }}
        run: |
          packer build \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "aws_default_subnet_id=${{ secrets.AWS_DEFAULT_SUBNET_ID }}" \
            -var "gcp_zone=${{ secrets.GCP_ZONE }}" \
            -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var "AWS_DEMO_ACCOUNT_ID=${{ secrets.AWS_DEMO_ACCOUNT_ID }}" \
            -var "MYSQL_DATABASE=${MYSQL_DATABASE}" \
            -var "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" \
            -var "DB_USER=${DB_USER}" \
            ./packer/custom-image.pkr.hcl

      - name: Retrieve Latest AMI ID and Share with Demo Account
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
        run: |
          echo "Listing all AMIs matching '*webappAMI*' for debugging:"
          aws ec2 describe-images --region $AWS_REGION --filters "Name=name,Values=*webappAMI*" --output table
          echo "Retrieving latest AMI ID..."
          AMI_ID=$(aws ec2 describe-images \
            --region $AWS_REGION \
            --filters "Name=name,Values=webappAMI-*" \
            --query 'Images | sort_by(@, &CreationDate)[-1].ImageId' \
            --output text)

           echo "Latest AMI ID: $AMI_ID"
           if [ "$AMI_ID" = "None" ] || [ -z "$AMI_ID" ]; then
              echo "No AMI found matching webappAMI-*"
              exit 10
           fi
            
          echo "Sharing AMI with Demo Account..."
          aws ec2 modify-image-attribute --region $AWS_REGION --image-id "$AMI_ID" \
            --launch-permission "Add=[{UserId=${AWS_DEMO_ACCOUNT_ID}}]"

      - name: Authenticate GCP
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          gcloud auth activate-service-account --key-file /tmp/gcloud.json --project $GCP_PROJECT_ID

      - name: Retrieve Latest GCP Machine Image and Share with Demo Account
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_DEMO_MEMBER: ${{ secrets.GCP_DEMO_MEMBER }}
        run: |
          echo "Retrieving latest GCP machine image..."
          IMAGE_NAME=$(gcloud compute images list \
            --project $GCP_PROJECT_ID \
            --filter="name~'^custom-nodejs-app-'" \
            --sort-by=~creationTimestamp \
            --limit=1 \
            --format="value(name)")

          echo "Latest GCP Image Name: $IMAGE_NAME"
          if [ -z "$IMAGE_NAME" ]; then
            echo "No GCP machine image found matching custom-nodejs-app-*"
            exit 1
          fi

          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Copy GCP Image to Demo Project (Create Alias)
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_DEMO_PROJECT_ID: ${{ secrets.GCP_DEMO_PROJECT_ID }}
        run: |
          echo "Copying image from DEV project ($GCP_PROJECT_ID) to DEMO project ($GCP_DEMO_PROJECT_ID)..."
          gcloud compute images create "my-demo-image-$(date +%s)" \
            --source-image=projects/${GCP_PROJECT_ID}/global/images/${IMAGE_NAME} \
            --source-image-project=${GCP_PROJECT_ID} \
            --project=${GCP_DEMO_PROJECT_ID} \
            --family=custom-nodejs-app \
            --description="Copied image from DEV"
