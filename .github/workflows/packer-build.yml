name: Packer AMI Build

on:
  push:
    branches:
      - main

jobs:
  build-custom-image:
    if: github.event.repository.fork == false
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Debug - List All Files and Directories
        run: |
          echo "Listing all files and directories recursively..."
          ls -la

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install Dependencies
        run: npm ci

      - name: Setup Build Environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip

      - name: Run Integration Tests
        env:
          DB_NAME: ${{ secrets.MYSQL_DATABASE }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.MYSQL_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          PORT: ${{ secrets.PORT }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
          S3_BUCKET_NAME: test-bucket-name
          NODE_ENV: test
        run: npm test
        
      - name: Configure for Production
        run: |
          # This ensures that in production, the code tries to load AWS SDK
          # This step should come after testing but before building
          if grep -q "process.env.NODE_ENV === 'test'" utils.js; then
            sed -i "s/process.env.NODE_ENV === 'test'/process.env.NODE_ENV === 'test-disabled'/g" utils.js
          elif grep -q 'process.env.NODE_ENV === "test"' utils.js; then
            sed -i 's/process.env.NODE_ENV === "test"/process.env.NODE_ENV === "test-disabled"/g' utils.js
          fi
          cat utils.js

      - name: Build Application Artifact
        env:
          PORT: ${{ secrets.PORT }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          DB_HOST: "process.env.DB_HOST"
          ENV_FILE_CONTENT: ${{ secrets.ENV_FILE_CONTENT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
        run: ./scripts/build.sh

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
           unzip -o awscliv2.zip
           sudo ./aws/install --update
           
      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.0"

      - name: Print Working Directory and List Files
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing files:"
          ls -la

      - name: Initialize Packer Template
        env:
          PACKER_GITHUB_API_TOKEN: ${{ secrets.GCP_API_TOKEN }}
        run: packer init ./packer/custom-image.pkr.hcl

      - name: Validate Packer Template
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DEFAULT_SUBNET_ID: ${{ secrets.AWS_DEFAULT_SUBNET_ID }}
          AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          DB_USER: ${{ secrets.DB_USER }}
          PORT: ${{ secrets.PORT }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}

        run: |
          packer validate \
            -var "aws_region=${AWS_REGION}" \
            -var "aws_default_subnet_id=${AWS_DEFAULT_SUBNET_ID}" \
            -var "AWS_DEMO_ACCOUNT_ID=${AWS_DEMO_ACCOUNT_ID}" \
            -var "MYSQL_DATABASE=${MYSQL_DATABASE}" \
            -var "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" \
            -var "DB_USER=${DB_USER}" \
            -var "PORT=${PORT}" \
            -var "DB_DIALECT=${DB_DIALECT}" \
            -var "DB_HOST=placeholder-db.amazonaws.com" \
            ./packer/custom-image.pkr.hcl

      - name: Run Packer Build
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          DB_USER: ${{ secrets.DB_USER }}
          PORT: ${{ secrets.PORT }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
        run: |
          packer build \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "aws_default_subnet_id=${{ secrets.AWS_DEFAULT_SUBNET_ID }}" \
            -var "AWS_DEMO_ACCOUNT_ID=${{ secrets.AWS_DEMO_ACCOUNT_ID }}" \
            -var "MYSQL_DATABASE=${MYSQL_DATABASE}" \
            -var "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" \
            -var "DB_USER=${DB_USER}" \
            -var "PORT=${PORT}" \
            -var "DB_DIALECT=${DB_DIALECT}" \
            -var "DB_HOST=placeholder-db.amazonaws.com" \
            ./packer/custom-image.pkr.hcl

      - name: Retrieve Latest AMI ID and Share with Demo Account
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
        run: |
          echo "Listing all AMIs matching '*webappAMI*' for debugging:"
          aws ec2 describe-images --region $AWS_REGION --filters "Name=name,Values=*webappAMI*" --output table
          echo "Retrieving latest AMI ID..."
          AMI_ID=$(aws ec2 describe-images \
            --region $AWS_REGION \
            --filters "Name=name,Values=webappAMI-*" \
            --query 'Images | sort_by(@, &CreationDate)[-1].ImageId' \
            --output text)

           echo "Latest AMI ID: $AMI_ID"
           if [ "$AMI_ID" = "None" ] || [ -z "$AMI_ID" ]; then
              echo "No AMI found matching webappAMI-*"
              exit 10
           fi
            
          echo "Sharing AMI with Demo Account..."
          aws ec2 modify-image-attribute --region $AWS_REGION --image-id "$AMI_ID" \
            --launch-permission "Add=[{UserId=${AWS_DEMO_ACCOUNT_ID}}]"

          # Store AMI ID for later use
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Configure AWS CLI for DEMO Account
        env:
          AWS_DEMO_ACCESS_KEY_ID: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          AWS_DEMO_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Configure AWS CLI with DEMO account credentials
          aws configure set aws_access_key_id $AWS_DEMO_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_DEMO_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION
          
          # Verify the configuration
          echo "Verifying AWS CLI configuration for DEMO account..."
          aws sts get-caller-identity
          
      - name: Wait for AMI to be available in DEMO account
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "Waiting for AMI to be available in DEMO account..."
          attempts=0
          max_attempts=30
          
          while [ $attempts -lt $max_attempts ]; do
            attempts=$((attempts+1))
            echo "Attempt $attempts of $max_attempts..."
            
            DEMO_AMI_STATUS=$(aws ec2 describe-images --region $AWS_REGION --image-ids $AMI_ID --query 'Images[0].State' --output text || echo "unavailable")
            
            if [ "$DEMO_AMI_STATUS" = "available" ]; then
              echo "AMI is now available in DEMO account!"
              break
            fi
            
            if [ $attempts -eq $max_attempts ]; then
              echo "Timed out waiting for AMI to be available in DEMO account."
              exit 11
            fi
            
            echo "AMI status: $DEMO_AMI_STATUS. Waiting 10 seconds..."
            sleep 10
          done

      - name: Update Launch Template and Refresh Instances
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Get the current launch template version
          LAUNCH_TEMPLATE_VERSION=$(aws ec2 describe-launch-templates \
            --launch-template-names csye6225_asg \
            --query 'LaunchTemplates[0].LatestVersionNumber' \
            --output text)
            
          echo "Current Launch Template Version: $LAUNCH_TEMPLATE_VERSION"
          
          # Create a new launch template version with the new AMI
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name csye6225_asg \
            --source-version $LAUNCH_TEMPLATE_VERSION \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
            
          echo "Created new Launch Template version: $NEW_VERSION"
          
          # Start an instance refresh
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name webapp-asg \
            --preferences "{\"MinHealthyPercentage\": 50, \"InstanceWarmup\": 300}" \
            --query 'InstanceRefreshId' \
            --output text)
            
          echo "Started instance refresh with ID: $REFRESH_ID"
          
          # Monitor the instance refresh until completion
          echo "Monitoring instance refresh status..."
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name webapp-asg \
              --instance-refresh-ids $REFRESH_ID \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
              
            PERCENTAGE=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name webapp-asg \
              --instance-refresh-ids $REFRESH_ID \
              --query 'InstanceRefreshes[0].PercentageComplete' \
              --output text)
              
            echo "Refresh status: $STATUS, Percentage complete: $PERCENTAGE%"
            
            if [ "$STATUS" = "Successful" ]; then
              echo "Instance refresh completed successfully!"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              REASON=$(aws autoscaling describe-instance-refreshes \
                --auto-scaling-group-name webapp-asg \
                --instance-refresh-ids $REFRESH_ID \
                --query 'InstanceRefreshes[0].StatusReason' \
                --output text)
              echo "Instance refresh failed with reason: $REASON"
              exit 12
            fi
            
            echo "Waiting 30 seconds for refresh to progress..."
            sleep 30
          done  